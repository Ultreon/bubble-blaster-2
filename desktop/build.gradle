//file:noinspection GroovyUnusedCatchParameter

import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        mavenCentral()

        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            name = "sonatype"
        }

        maven {
            url = "https://maven.atlassian.com/3rdparty/"
        }

        google()
    }

    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: "$commons_io_version"
        classpath "com.google.code.gson:gson:2.10.1"
    }
}

//*****************//
//     Plugins     //
//*****************//
plugins {
//    id 'java'
//    id 'java-library'
//    id 'maven-publish'
//    id "org.panteleyev.jpackageplugin"
}

apply plugin: 'java'
apply plugin: 'java-library'
//apply plugin: 'maven-publish'

//****************************//
// Setting up main properties //
//****************************//

// Project properties.
version project_version
group project_group

archivesBaseName = archives_base_name + "-desktop"

java {
    withSourcesJar()
    withJavadocJar()

    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

evaluationDependsOn(":core")

dependencies {
    implementation project(":gameprovider")
    implementation project(":core")

    // Annotations
    implementation "org.checkerframework:checker:$checker_framework_version"
    implementation "org.jetbrains:annotations:$jetbrains_annotations_version"

    // Test dependencies
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"

    // FastUtil
    implementation "it.unimi.dsi:fastutil:$fastutil_version"
    implementation "it.unimi.dsi:fastutil-extra:$fastutil_extras_version"
    implementation "it.unimi.dsi:fastutil-core:$fastutil_version"

    // UBO
    implementation "com.github.Ultreon:ultreon-data:$ultreon_data_version"

    // Misc
    implementation "org.jetbrains:annotations:$jetbrains_annotations_version"
    implementation "com.electronwill.night-config:toml_android:$nightconfig_version"

    // CoreLibs
    implementation "com.github.Ultreon.corelibs:corelibs-collections-v0:$corelibs_version"
    implementation "com.github.Ultreon.corelibs:corelibs-commons-v0:$corelibs_version"
    implementation "com.github.Ultreon.corelibs:corelibs-crash-v0:$corelibs_version"
    implementation "com.github.Ultreon.corelibs:corelibs-datetime-v0:$corelibs_version"
    implementation "com.github.Ultreon.corelibs:corelibs-events-v1:$corelibs_version"
    implementation "com.github.Ultreon.corelibs:corelibs-functions-v0:$corelibs_version"
    implementation "com.github.Ultreon.corelibs:corelibs-registries-v0:$corelibs_version"
    implementation "com.github.Ultreon.corelibs:corelibs-resources-v0:$corelibs_version"
    implementation "com.github.Ultreon.corelibs:corelibs-text-v0:$corelibs_version"
    implementation "com.github.Ultreon.corelibs:corelibs-translations-v0:$corelibs_version"
    implementation "com.github.Ultreon.corelibs:corelibs-translations-v1:$corelibs_version"

    // Apis
    implementation "commons-io:commons-io:$commons_io_version"
    implementation "org.apache.commons:commons-lang3:$commons_lang_version"
    implementation "org.apache.commons:commons-collections4:$commons_collections_version"
    implementation "org.apache.commons:commons-text:$commons_text_version"
    implementation "org.apache.commons:commons-math3:$commons_math_version"
    implementation "org.apache.ant:ant:$ant_version"

    // Local jars.
    implementation fileTree(dir: "$projectDir/libs", include: ["*.jar"])

    // Google
    implementation "com.google.code.findbugs:jsr305:$jsr_version"
    implementation "com.google.guava:guava:$guava_version"
    implementation "com.google.code.gson:gson:$gson_version"

    // Apache
    implementation "org.apache.logging.log4j:log4j:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-core:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-api:$log4j_version"
    implementation("org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version") { exclude group: "org.slf4j" }
    implementation "org.apache.logging.log4j:log4j-jcl:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-jul:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-web:$log4j_version"

    // SLF4J
    implementation "org.slf4j:slf4j-api:$slf4j_version"

    // OSHi (For system info in crash reports)
    implementation "com.github.oshi:oshi-core:$oshi_version"

    // Discord Presence
    implementation "com.github.JnCrMx:discord-game-sdk4j:v0.5.5"

    // LibGDX
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdx_version"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdx_version:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdx_version:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-bullet-platform:$gdx_version:natives-desktop"
    implementation "com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdx_controllers_version"
    implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdx_version:natives-desktop"

    // GDX Visual Effects
    implementation 'com.crashinvaders.vfx:gdx-vfx-core:0.5.0'
    implementation 'com.crashinvaders.vfx:gdx-vfx-effects:0.5.0'    // Optional, if you need standard filter/effects.

    // Apache Log4J
    implementation "org.apache.logging.log4j:log4j:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-core:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-api:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"

    // JNA
    implementation "net.java.dev.jna:jna:$jna_version"
    implementation "net.java.dev.jna:jna-platform:$jna_version"

    // SLF4J
    api "org.slf4j:slf4j-api:$slf4j_version"

    // Google
    implementation "com.google.code.gson:gson:2.10.1"
    implementation 'com.google.guava:guava:32.0.0-jre'

    // Misc
    implementation 'it.unimi.dsi:fastutil:8.5.12'

    implementation "space.earlygrey:shapedrawer:$shapedrawer_version"

    // ImGui
    implementation "io.github.spair:imgui-java-binding:$imgui_version"
    implementation "io.github.spair:imgui-java-lwjgl3:$imgui_version"
    implementation "io.github.spair:imgui-java-natives-linux:$imgui_version"
    implementation "io.github.spair:imgui-java-natives-macos:$imgui_version"
    implementation "io.github.spair:imgui-java-natives-windows:$imgui_version"

    implementation "it.unimi.dsi:fastutil-core:$fastutil_version"
    implementation "com.google.code.findbugs:jsr305:$jsr_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"

    implementation "org.xbib.elasticsearch:joptsimple:6.3.2.1"
    implementation "org.apache.logging.log4j:log4j:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-core:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-api:$log4j_version"

    // fabric-loader dependencies
    implementation "org.ow2.asm:asm:${project.asm_version}"
    implementation "org.ow2.asm:asm-analysis:${project.asm_version}"
    implementation "org.ow2.asm:asm-commons:${project.asm_version}"
    implementation "org.ow2.asm:asm-tree:${project.asm_version}"
    implementation "org.ow2.asm:asm-util:${project.asm_version}"

    implementation("net.fabricmc:sponge-mixin:${project.mixin_version}") {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
    }

    implementation 'net.fabricmc:tiny-mappings-parser:0.3.0+build.17'
    implementation 'net.fabricmc:tiny-remapper:0.8.5'
    implementation 'net.fabricmc:dev-launch-injector:0.2.1+build.8'
    implementation 'net.fabricmc:access-widener:2.1.0'

    implementation("net.fabricmc:fabric-loader:$fabric_version")
}

processResources {
    from(file("$rootProject.projectDir/LICENSE")) { into "META-INF/" }
    exclude "*.pdn", "*.xcf", "*.ps"

    inputs.property "version", rootProject.version

    filesMatching("metadata.json") {
        expand(["version": rootProject.version])
    }
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

jar {
    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'Bubble Blaster',
                'Implementation-Vendor': 'Ultreon Team',
                project_version: project.project_version,
                'Main-Class': 'com.ultreon.craft.DesktopLauncher',
                'Multi-Release': 'true'
    }

    from {
        compileJava.outputs
    }
    from {
        processResources.outputs
    }

    zip64 true
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.create('prepareRun', {
    Files.createDirectories(Paths.get(rootProject.projectDir.getAbsolutePath(), "run"))
})

tasks.withType(JavaCompile).configureEach {
    options.fork = true
    options.incremental = true
}

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

task("copyDependencies", type: Copy) {
    from(configurations.runtimeClasspath)
    into("$buildDir/jars")
}

task("copyJar", type: Copy) {
    from(tasks.jar)
    into("$buildDir/jars")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

compileJava {
    options.encoding = "UTF-8"
}
