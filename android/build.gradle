apply plugin: "com.android.application"

configurations { natives }

repositories {
    google()
}

dependencies {
    implementation project(":core")
    api 'com.android.support:appcompat-v7:33.0.0'
    api "com.badlogicgames.gdx:gdx-backend-android:$gdx_version"
    api 'androidx.appcompat:appcompat:1.6.1'
    api 'androidx.constraintlayout:constraintlayout:2.1.4'
    natives "com.badlogicgames.gdx:gdx-platform:$gdx_version:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdx_version:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdx_version:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdx_version:natives-x86_64"
    api "com.badlogicgames.box2dlights:box2dlights:$box_2d_lights_version"
    api "com.badlogicgames.gdx:gdx-freetype:$gdx_version"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdx_version:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdx_version:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdx_version:natives-x86"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdx_version:natives-x86_64"
    api "com.badlogicgames.ashley:ashley:$ashley_version"
    api "com.badlogicgames.gdx:gdx-ai:$ai_version"
    api "com.badlogicgames.gdx-controllers:gdx-controllers-android:$gdx_controllers_version"
    api "com.badlogicgames.gdx:gdx-box2d:$gdx_version"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdx_version:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdx_version:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdx_version:natives-x86"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdx_version:natives-x86_64"
    api files("deps/androidawt-1.0.4.aar")
}

android {
    buildToolsVersion "33.0.1"
    compileSdkVersion 33
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['../core/src/main/resources']
            jniLibs.srcDirs = ['libs']
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/robovm/ios/robovm.xml']
            excludes += ['META-INF/INDEX.LIST']
            excludes += ['META-INF/DEPENDENCIES']
            excludes += ['LICENSE.md']
        }
    }
    defaultConfig {
        applicationId "com.ultreon.bubbles"
        minSdk 29
        //noinspection OldTargetApi
        targetSdkVersion 33
        versionCode 1
        versionName "0.1.0"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude("META-INF/DEPENDENCIES")
        exclude("META-INF/LICENSE")
        exclude("META-INF/LICENSE.txt")
        exclude("META-INF/license.txt")
        exclude("META-INF/NOTICE")
        exclude("META-INF/NOTICE.txt")
        exclude("META-INF/notice.txt")
        exclude("META-INF/ASL2.0")
        exclude("META-INF/AL2.0")
        exclude("META-INF/LGPL2")
        exclude("META-INF/LGPL2.0")
        exclude("META-INF/LGPL2.1")
    }

    namespace "com.ultreon.bubbles"
    buildFeatures {
        viewBinding true
    }
}


// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives {
    doFirst {
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.copy().files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if(outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.matching { it.name.contains("merge") && it.name.contains("JniLibFolders") }.configureEach { packageTask ->
    packageTask.dependsOn 'copyAndroidNatives'
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.ultreon.bubbles/com.ultreon.bubbles.AndroidLauncher'
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = project_group
            artifactId = project_id
            version = project_version

            afterEvaluate {
                println(components.properties)
                from components.release_aab
            }
        }
    }
}

//eclipse.project.name = project_name + "-android"
