//file:noinspection GroovyUnusedCatchParameter


import com.ultreon.bubbles.gradle.VersionType
import org.apache.tools.ant.taskdefs.condition.Os

import java.nio.file.Files
import java.nio.file.Paths

import static java.lang.System.getenv

buildscript {
    repositories {
        mavenCentral()

        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            name = "sonatype"
        }

        maven {
            url = "https://maven.atlassian.com/3rdparty/"
        }

        google()
    }

    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.8.0'
        classpath "com.google.code.gson:gson:2.8.9"
    }
}

//*****************//
//     Plugins     //
//*****************//
plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'bubbles-gradle'

//****************************//
// Setting up main properties //
//****************************//

// Project properties.
version project_version
group project_group

archivesBaseName = archives_base_name + "-core"

java {
    withSourcesJar()
    withJavadocJar()
}

bubbles {
    versionType(VersionType.DEV)
}

//**********************//
//     Repositories     //
//**********************//
repositories {
    mavenCentral()
    mavenLocal()
    google()
    maven {
        name "JitPack"
        url 'https://jitpack.io'
    }
    maven {
        name "Atlassian"
        url "https://maven.atlassian.com/3rdparty/"
    }
    maven {
        name "Maven Central"
        url "https://repo1.maven.org/maven2/"
    }
    maven {
        name "RuneLite"
        url "https://repo.runelite.net/"
    }
    maven {
        name "FabricMC"
        url "https://maven.fabricmc.net/"
    }
    flatDir {
        name "Project Libraries"
        dirs "${projectDir}/libs"
    }
}

/***************
 * Dependencies
 */
dependencies {
    // Projects
    api project(":gameprovider")
    implementation project(":minimal")
    api "it.unimi.dsi:fastutil:$fastutil_version"
    api "it.unimi.dsi:fastutil-extra:$fastutil_extras_version"
    api "it.unimi.dsi:fastutil-core:$fastutil_version"
    api "org.checkerframework:checker:$checker_framework_version"

    api "com.github.Ultreon:ultreon-data:$ultreon_data_version"
    api "org.jetbrains:annotations:$jetbrains_annotations_version"

    // Test dependencies
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"

    // Misc
    api "org.jetbrains:annotations:$jetbrains_annotations_version"
    api "com.electronwill.night-config:toml_android:$nightconfig_version"

    // CoreLibs
    api "com.github.Ultreon.corelibs:corelibs-collections-v0:$corelibs_version"
    api "com.github.Ultreon.corelibs:corelibs-commons-v0:$corelibs_version"
    api "com.github.Ultreon.corelibs:corelibs-crash-v0:$corelibs_version"
    api "com.github.Ultreon.corelibs:corelibs-datetime-v0:$corelibs_version"
    api "com.github.Ultreon.corelibs:corelibs-events-v1:$corelibs_version"
    api "com.github.Ultreon.corelibs:corelibs-functions-v0:$corelibs_version"
    api "com.github.Ultreon.corelibs:corelibs-registries-v0:$corelibs_version"
    api "com.github.Ultreon.corelibs:corelibs-resources-v0:$corelibs_version"
    api "com.github.Ultreon.corelibs:corelibs-text-v0:$corelibs_version"
    api "com.github.Ultreon.corelibs:corelibs-translations-v0:$corelibs_version"

    // Apis
    api "commons-io:commons-io:$commons_io_version"
    api "commons-net:commons-net:$commons_net_version"
    api "org.apache.commons:commons-lang3:$commons_lang_version"
    api "org.apache.commons:commons-lang3:$commons_lang_version"
    api "org.apache.commons:commons-collections4:$commons_collections_version"
    api "org.apache.commons:commons-text:$commons_text_version"
    api "org.apache.commons:commons-math3:$commons_math_version"
    api "org.apache.ant:ant:$ant_version"

    // Local jars.
    api fileTree(dir: "$projectDir/libs", include: ["*.jar"])

    // Google
    api "com.google.code.findbugs:jsr305:$jsr_version"
    api "com.google.guava:guava:$guava_version"
    api "com.google.code.gson:gson:$gson_version"

    // Apache
    api "org.apache.logging.log4j:log4j:$log4j_version"
    api "org.apache.logging.log4j:log4j-core:$log4j_version"
    api "org.apache.logging.log4j:log4j-api:$log4j_version"
    api("org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version") { exclude group: "org.slf4j" }
    api "org.apache.logging.log4j:log4j-jcl:$log4j_version"
    api "org.apache.logging.log4j:log4j-jul:$log4j_version"
    api "org.apache.logging.log4j:log4j-web:$log4j_version"
    api("org.apache.xmlgraphics:batik-svg-dom:$batik_version") {
        exclude group: 'xml-apis', module: 'xml-apis-ext'
        exclude group: 'xml-apis', module: 'xml-apis'
    }
    api("org.apache.xmlgraphics:batik-dom:$batik_version") {
        exclude group: 'xml-apis', module: 'xml-apis-ext'
        exclude group: 'xml-apis', module: 'xml-apis'
    }
    api("org.apache.xmlgraphics:batik-swing:$batik_version") {
        exclude group: 'xml-apis', module: 'xml-apis-ext'
        exclude group: 'xml-apis', module: 'xml-apis'
    }

    // SLF4J
    api "org.slf4j:slf4j-api:$slf4j_version"

    // OSHi (For system info in crash reports)
    api "com.github.oshi:oshi-core:$oshi_version"

    // Discord Presence
    api "com.github.JnCrMx:discord-game-sdk4j:v0.5.5"

    // LibGDX
    api "com.badlogicgames.gdx:gdx:$gdx_version"
    api "com.badlogicgames.gdx:gdx-box2d:$gdx_version"
    api "com.badlogicgames.ashley:ashley:$ashley_version"
    api "com.badlogicgames.gdx:gdx-ai:$ai_version"
    api "com.badlogicgames.gdx-controllers:gdx-controllers-core:$gdx_controllers_version"
    api "com.badlogicgames.gdx:gdx-freetype:$gdx_version"
    api "com.badlogicgames.gdx:gdx-tools:$gdx_version"
    api "com.badlogicgames.box2dlights:box2dlights:$box_2d_lights_version"
    api "space.earlygrey:shapedrawer:$shapedrawer_version"

    api "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdx_version"
    api "com.badlogicgames.gdx:gdx-platform:$gdx_version:natives-desktop"
    api "com.badlogicgames.gdx:gdx-box2d-platform:$gdx_version:natives-desktop"
    api "com.badlogicgames.gdx:gdx-bullet-platform:$gdx_version:natives-desktop"
    api "com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdx_controllers_version"
    api "com.badlogicgames.gdx:gdx-freetype-platform:$gdx_version:natives-desktop"

    // GDX Visual Effects
    api 'com.crashinvaders.vfx:gdx-vfx-core:0.5.0'
    api 'com.crashinvaders.vfx:gdx-vfx-effects:0.5.0'    // Optional, if you need standard filter/effects.

    // ImGui
    api "io.github.spair:imgui-java-binding:$imgui_version"
    api "io.github.spair:imgui-java-lwjgl3:$imgui_version"
    api "io.github.spair:imgui-java-natives-linux:$imgui_version"
    api "io.github.spair:imgui-java-natives-macos:$imgui_version"
    api "io.github.spair:imgui-java-natives-windows:$imgui_version"

    // fabric-loader dependencies
    implementation "org.ow2.asm:asm:${project.asm_version}"
    implementation "org.ow2.asm:asm-analysis:${project.asm_version}"
    implementation "org.ow2.asm:asm-commons:${project.asm_version}"
    implementation "org.ow2.asm:asm-tree:${project.asm_version}"
    implementation "org.ow2.asm:asm-util:${project.asm_version}"

    implementation("net.fabricmc:sponge-mixin:${project.mixin_version}") {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
    }

    implementation 'net.fabricmc:tiny-mappings-parser:0.3.0+build.17'
    implementation 'net.fabricmc:tiny-remapper:0.8.5'
    implementation 'net.fabricmc:dev-launch-injector:0.2.1+build.8'
    implementation 'net.fabricmc:access-widener:2.1.0'

    compileOnly "net.fabricmc:fabric-loader:$fabric_version"
}

processResources {
    inputs.property "version", version

    filesMatching("fabric.mod.json") {
        expand "version": version
    }

    from(file("NOTICE.txt")) { into "META-INF/" }
    from(file("$rootProject.projectDir/LICENSE")) { into "META-INF/" }

    exclude "*.pdn", "*.xcf", "*.ps"
}

jar {
    dependsOn ":gameprovider:jar"

    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'Bubble Blaster 2',
                'Implementation-Vendor': 'Ultreon Team',
                project_version: project.project_version,
                'Main-Class': 'net.fabricmc.impl.launch.knot.KnotClient',
                'Multi-Release': 'true'
    }

    from {
        compileJava.outputs
    }
    from {
        processResources.outputs
    }

    zip64 true
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

processResources {
}

test {
    useJUnitPlatform()
}

tasks.create('prepareRun', {
    Files.createDirectories(Paths.get(rootProject.projectDir.getAbsolutePath(), "run"))
})

tasks.withType(JavaCompile).configureEach {
    options.fork = true
    options.incremental = true
}

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

build {
//    mustRunAfter ":packedJar"
}

task createExec {
    doFirst {
        if (!file("build").exists()) {
            mkdir "build"
        }
        mkdir "build/exec/"
        if (file("build/exec/lib/").exists()) {
            delete fileTree("build/exec/lib/")
        }
        copy {
            from file("bin/start.bat")
            into file("build/exec/")
        }
        copy {
            from file("bin/start-unix.sh")
            into file("build/exec/")
        }
        copy {
            from file("bin/start-mac.sh")
            into file("build/exec/")
        }
        copy {
            from jar.outputs.files.singleFile
            into file("build/exec/")
            rename ".*", "bubbles.jar"
        }
        mkdir "build/exec/lib/"
        copy {
            from fileTree("build/dependencies/")
            into file("build/exec/lib/")
        }
    }
}

jar.finalizedBy(retrieveUrls)
publish.finalizedBy(retrieveUrls)

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

task("copyDependencies", type: Copy) {
    from(configurations.runtimeClasspath)
    into("$buildDir/jars")
}

task("copyJar", type: Copy) {
    from(tasks.jar)
    into("$buildDir/jars")
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println("OS: " + System.getProperty("os.name") + " Version: " + System.getProperty("os.version"))

println("Current version: " + project_version)
println("Project: " + group + ":" + archivesBaseName)
println("Bulding a Java " + compileJava.targetCompatibility + " project...")
