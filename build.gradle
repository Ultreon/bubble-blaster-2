//file:noinspection GroovyUnusedCatchParameter


import dev.ultreon.gameutils.GameUtilsExt
import org.jetbrains.gradle.ext.Application
import org.mini2Dx.butler.task.PushTask

import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption

buildscript {
    repositories {
        mavenCentral()

        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            name = "sonatype"
        }

        maven {
            url = "https://maven.atlassian.com/3rdparty/"
        }

        maven {
            url 'https://storage.googleapis.com/r8-releases/raw'
        }

        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        classpath group: 'org.mini2Dx', name: 'butler', version: '2.1.0'
    }
}

//*****************//
//     Plugins     //
//*****************//
plugins {
    id 'maven-publish'
    id 'java'
    id 'java-library'
    id 'application'
//    id 'com.github.johnrengelman.shadow' version '7.+'
}
apply plugin: "org.jetbrains.gradle.plugin.idea-ext"
apply plugin: "org.mini2Dx.butler"
apply plugin: "gameutils"

//apply plugin: 'maven-publish'

//****************************//
// Setting up main properties //
//****************************//
version project_version + "+snapshot." + new Date().format("yyyy.MM.dd.HH.mm")
group project_group

extensions.getByType(GameUtilsExt).with {
    projectName = "Bubble Blaster"

    projectVersion = "$project_version"
    projectGroup = "io.github.ultreon.bubbles"
    projectId = "bubble-blaster"
    production = true

    packageProject = project(":desktop-merge")

    mainClass = "net.fabricmc.loader.impl.launch.knot.KnotClient"
    javaVersion = 11
}

//**********************//
//     Repositories     //
//**********************//
repositories {
    mavenCentral()
    mavenLocal()
    google()
    jcenter()
    maven {
        name "Atlassian"
        url "https://maven.atlassian.com/3rdparty/"
    }
    maven {
        name "Maven Central"
        url "https://repo1.maven.org/maven2/"
    }
    maven {
        name "RuneLite"
        url "https://repo.runelite.net/"
    }
    maven {
        name "JitPack"
        url 'https://jitpack.io'

        content {
            includeGroup "com.github.JnCrMx"
            includeGroup "dev.ultreon"
            includeGroup "dev.ultreon.corelibs"
            includeGroup "space.earlygrey"
        }
    }
    flatDir {
        name "Project Libraries"
        dirs "${projectDir}/libs"
    }
}

beforeEvaluate {

/*****************
 * Configurations
 */
    configurations {
        // configuration that holds jars to include in the jar
        implementation {
            canBeResolved true
        }
        include {
            canBeResolved true
        }
        addToJar {
            canBeResolved true
        }
    }

/***************
 * Dependencies
 */
    dependencies {
        // Projects
        implementation(project(":core"))
        implementation(project(":desktop"))
        implementation(project(":gameprovider"))
    }

    dependencies {
        implementation project(":core")
        implementation project(":desktop")
        implementation project(":desktop-merge")
        implementation project(":gameprovider")
        implementation project(":minimal")
    }
}

base {
    archivesName = project.archivesBaseName
}

allprojects {
    apply plugin: "maven-publish"

    version project_version + "+snapshot." + new Date().format("yyyy.MM.dd.HH.mm")

    group project_group

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        maven {
            name "JitPack"
            url 'https://jitpack.io'

            content {
                includeGroup "com.github.JnCrMx"
                includeGroup "space.earlygrey"
            }
        }
        maven {
            name "Maven Central"
            url "https://repo1.maven.org/maven2/"
        }
        maven {
            name "FabricMC"
            url "https://maven.fabricmc.net/"
        }
        maven {
            name "JitPack"
            url "https://jitpack.io/"

            content {
                includeGroup "com.github.JnCrMx"
                includeGroup "dev.ultreon"
                includeGroup "dev.ultreon.corelibs"
                includeGroup "space.earlygrey"
            }
        }
        flatDir {
            name "Project Libraries"
            dirs "${projectDir}/libs"
        }
        flatDir {
            name "Project Libraries"
            dirs "${rootProject.projectDir}/libs"
        }

        maven {
            name = "BubbleBlasterMaven"
            url = uri("https://maven.pkg.github.com/Ultreon/bubble-blaster-2")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }

    dependencies {

    }
}

tasks.withType(JavaCompile).configureEach {
    options.fork = true
    options.incremental = true
}

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

task createExec {
    doFirst {
        if (!file("build").exists()) {
            mkdir "build"
        }
        mkdir "build/exec/"
        if (file("build/exec/lib/").exists()) {
            delete fileTree("build/exec/lib/")
        }
        copy {
            from file("bin/start.bat")
            into file("build/exec/")
        }
        copy {
            from file("bin/start-unix.sh")
            into file("build/exec/")
        }
        copy {
            from file("bin/start-mac.sh")
            into file("build/exec/")
        }
        copy {
            from jar.outputs.files.singleFile
            into file("build/exec/")
            rename ".*", "bubble-blaster.jar"
        }
        mkdir "build/exec/lib/"
        copy {
            from fileTree("build/dependencies/")
            into file("build/exec/lib/")
        }
    }
}

artifacts {
//    packedJar
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println("OS: " + System.getProperty("os.name") + " Version: " + System.getProperty("os.version"))

println("Current version: " + version)
println("Project: " + group + ":" + name)

mkdir("$buildDir/bubbles")

def ps = System.getProperty("path.separator")
def files = configurations.runtimeClasspath
def strm = (files.toList()).stream()
def rcl = String.join(ps, strm.map {
    it.path
}.filter{it != null }.toList())
//\tfabric.remapClasspathFile=$buildDir/bubbles/classpath.txt
//\tfabric.classPathGroups=$buildDir/classes/java/main/$ps$buildDir/resources/main/$ps${project(":core").buildDir}/classes/java/main/$ps${project(":core").buildDir}/resources/main/$ps${project(":desktop").buildDir}/classes/java/main/$ps${project(":desktop").buildDir}/resources/main/$ps${project(":gameprovider").buildDir}/classes/java/main/$ps${project(":gameprovider").buildDir}/resources/main/$ps$rcl
def conf = """
commonProperties
\tfabric.development=true
\tlog4j2.formatMsgNoLookups=true
\tfabric.log.disableAnsi=false
\tlog4j.configurationFile=$projectDir/log4j.xml
"""

def launchFile = file("$buildDir/bubbles/launch.cfg")
Files.writeString(launchFile.toPath(), conf, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE)

def cp = "$rcl"

def cpFile = file("$buildDir.absolutePath/bubbles/classpath.txt")
Files.writeString(cpFile.toPath(), cp, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE)

application {
    applicationDefaultJvmArgs = ["-Xmx2g", "-Dfabric.dli.config=$launchFile.path", "-Dfabric.dli.env=CLIENT", "-Dfabric.dli.main=net.fabricmc.loader.impl.launch.knot.KnotClient"]
    mainClass = 'net.fabricmc.devlaunchinjector.Main'
}

run.workingDir("$rootProject.projectDir/run")

idea{
    project{
        settings {
            withIDEADir { File dir ->
                println("Callback 1 executed with: " + dir.absolutePath)
            }

            runConfigurations {
                "Bubble Blaster"(Application) {                       // Create new run configuration "MyApp" that will run class foo.App
                    jvmArgs = "-Xmx2g -Dfabric.dli.config=$launchFile.path -Dfabric.dli.env=CLIENT -Dfabric.dli.main=net.fabricmc.loader.impl.launch.knot.KnotClient"
                    mainClass = 'net.fabricmc.devlaunchinjector.Main'
                    moduleName = idea.module.name + ".desktop.main"
                    workingDirectory = "$projectDir/run/"
                    programParameters = "--gameDir=."
                }
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = "bubble-blaster"
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Ultreon/bubble-blaster-2")
            credentials {
                username = project.findProperty("gpr.user") == null ? System.getenv("USERNAME") : project.findProperty("gpr.user")
                password = project.findProperty("gpr.key") == null ? System.getenv("TOKEN") : project.findProperty("gpr.key")
            }
        }
    }
}

butler {
    user = "xypercode"
    game = "bubble-blaster"
    updateButler = true
    allChannelsPostfix = "-beta"
}

tasks.register('butlerPushWindows', PushTask) {
    dependsOn build, ":desktop-merge:jpackage"
    binDirectory = file("$projectDir/desktop-merge/build/bin/windows")
    channel = "windows"
}

tasks.register('butlerPushLinux', PushTask) {
    dependsOn build, ":desktop-merge:jpackage"
    binDirectory = file("$projectDir/desktop-merge/build/bin/linux")
    channel = "linux"
}

tasks.register('butlerPushMac', PushTask) {
    dependsOn build, ":desktop-merge:jpackage"
    binDirectory = file("$projectDir/desktop-merge/build/bin/mac")
    channel = "mac"
}

tasks.register('butlerPushAll') {
    dependsOn butlerPushWindows, butlerPushLinux, butlerPushMac
}
