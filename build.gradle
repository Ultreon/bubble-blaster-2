//file:noinspection GroovyUnusedCatchParameter

import org.jetbrains.gradle.ext.Application

import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption

import static java.lang.System.getenv

buildscript {
    repositories {
        mavenCentral()

        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            name = "sonatype"
        }

        maven {
            url = "https://maven.atlassian.com/3rdparty/"
        }

        maven {
            url 'https://storage.googleapis.com/r8-releases/raw'
        }

        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.2.2'
    }
}

//*****************//
//     Plugins     //
//*****************//
plugins {
    id 'maven-publish'
    id 'java'
    id 'java-library'
//    id 'com.github.johnrengelman.shadow' version '7.+'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
}

//apply plugin: 'maven-publish'

//****************************//
// Setting up main properties //
//****************************//

version project_version
group project_group

//**********************//
//     Repositories     //
//**********************//
repositories {
    mavenCentral()
    mavenLocal()
    google()
    jcenter()
    maven {
        name "Atlassian"
        url "https://maven.atlassian.com/3rdparty/"
    }
    maven {
        name "Maven Central"
        url "https://repo1.maven.org/maven2/"
    }
    maven {
        name "RuneLite"
        url "https://repo.runelite.net/"
    }
    maven {
        name "JitPack"
        url 'https://jitpack.io'
    }
    flatDir {
        name "Project Libraries"
        dirs "${projectDir}/libs"
    }
}

/*****************
 * Configurations
 */
configurations {
    // configuration that holds jars to include in the jar
    implementation {
        canBeResolved true
    }
    include {
        canBeResolved true
    }
    addToJar {
        canBeResolved true
    }
}

/***************
 * Dependencies
 */
dependencies {
    // Projects
//    shadow(project(":core")) { transitive false }
//    shadow(project(":desktop")) { transitive false }
    implementation(project(":core"))
    implementation(project(":desktop"))
}

allprojects {
    apply plugin: "maven-publish"

    ext {
        app_name = "Bubble Blaster Closed Beta"
        gdx_version = '1.11.0'
        robo_vm_version = '2.3.16'
        box_2d_lights_version = '1.5'
        ashley_version = '1.7.4'
        ai_version = '1.8.2'
        gdx_controllers_version = '2.2.3'
    }

    publishing {
        publications {

        }
        repositories {

        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        maven {
            name "JitPack"
            url 'https://jitpack.io'
        }
        maven {
            name "Maven Central"
            url "https://repo1.maven.org/maven2/"
        }
        maven {
            name "FabricMC"
            url "https://maven.fabricmc.net/"
        }
        flatDir {
            name "Project Libraries"
            dirs "${projectDir}/libs"
        }
        flatDir {
            name "Project Libraries"
            dirs "${rootProject.projectDir}/libs"
        }
    }

    dependencies {

    }

//    publish.dependsOn build
}

tasks.create('prepareRun', {
    Files.createDirectories(Paths.get(projectDir.getAbsolutePath(), "run"))
})

tasks.withType(JavaCompile).configureEach {
    options.fork = true
    options.incremental = true
}

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

task createExec {
    doFirst {
        if (!file("build").exists()) {
            mkdir "build"
        }
        mkdir "build/exec/"
        if (file("build/exec/lib/").exists()) {
            delete fileTree("build/exec/lib/")
        }
        copy {
            from file("bin/start.bat")
            into file("build/exec/")
        }
        copy {
            from file("bin/start-unix.sh")
            into file("build/exec/")
        }
        copy {
            from file("bin/start-mac.sh")
            into file("build/exec/")
        }
        copy {
            from jar.outputs.files.singleFile
            into file("build/exec/")
            rename ".*", "bubble-blaster.jar"
        }
        mkdir "build/exec/lib/"
        copy {
            from fileTree("build/dependencies/")
            into file("build/exec/lib/")
        }
    }
}

artifacts {
//    packedJar
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println("OS: " + System.getProperty("os.name") + " Version: " + System.getProperty("os.version"))

println("Current version: " + version)
println("Project: " + group + ":" + name)

mkdir("$buildDir/bubbles")
