//file:noinspection GroovyUnusedCatchParameter


import org.jetbrains.gradle.ext.Application

import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption

buildscript {
    repositories {
        mavenCentral()

        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            name = "sonatype"
        }

        maven {
            url = "https://maven.atlassian.com/3rdparty/"
        }

        maven {
            url 'https://storage.googleapis.com/r8-releases/raw'
        }

        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
    }
}

//*****************//
//     Plugins     //
//*****************//
plugins {
    id 'maven-publish'
    id 'java'
    id 'java-library'
//    id 'com.github.johnrengelman.shadow' version '7.+'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
}

//apply plugin: 'maven-publish'

//****************************//
// Setting up main properties //
//****************************//

version project_version
group project_group

//**********************//
//     Repositories     //
//**********************//
repositories {
    mavenCentral()
    mavenLocal()
    google()
    jcenter()
    maven {
        name "Atlassian"
        url "https://maven.atlassian.com/3rdparty/"
    }
    maven {
        name "Maven Central"
        url "https://repo1.maven.org/maven2/"
    }
    maven {
        name "RuneLite"
        url "https://repo.runelite.net/"
    }
    maven {
        name "JitPack"
        url 'https://jitpack.io'
    }
    flatDir {
        name "Project Libraries"
        dirs "${projectDir}/libs"
    }
}

/*****************
 * Configurations
 */
configurations {
    // configuration that holds jars to include in the jar
    implementation {
        canBeResolved true
    }
    include {
        canBeResolved true
    }
    addToJar {
        canBeResolved true
    }
}

/***************
 * Dependencies
 */
dependencies {
    // Projects
    implementation(project(":core"))
    implementation(project(":desktop"))
}

allprojects {
    apply plugin: "maven-publish"

    publishing {
        publications {

        }
        repositories {

        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        maven {
            name "JitPack"
            url 'https://jitpack.io'
        }
        maven {
            name "Maven Central"
            url "https://repo1.maven.org/maven2/"
        }
        maven {
            name "FabricMC"
            url "https://maven.fabricmc.net/"
        }
        maven { url "https://github.com/Ultreon/ultreon-data/raw/main/.mvnrepo/" }
        maven { url "https://github.com/Ultreon/corelibs/raw/main/.mvnrepo/" }
        flatDir {
            name "Project Libraries"
            dirs "${projectDir}/libs"
        }
        flatDir {
            name "Project Libraries"
            dirs "${rootProject.projectDir}/libs"
        }
    }

    dependencies {

    }

//    publish.dependsOn build
}

tasks.create('prepareRun', {
    Files.createDirectories(Paths.get(projectDir.getAbsolutePath(), "run"))
})

tasks.withType(JavaCompile).configureEach {
    options.fork = true
    options.incremental = true
}

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

task createExec {
    doFirst {
        if (!file("build").exists()) {
            mkdir "build"
        }
        mkdir "build/exec/"
        if (file("build/exec/lib/").exists()) {
            delete fileTree("build/exec/lib/")
        }
        copy {
            from file("bin/start.bat")
            into file("build/exec/")
        }
        copy {
            from file("bin/start-unix.sh")
            into file("build/exec/")
        }
        copy {
            from file("bin/start-mac.sh")
            into file("build/exec/")
        }
        copy {
            from jar.outputs.files.singleFile
            into file("build/exec/")
            rename ".*", "bubble-blaster.jar"
        }
        mkdir "build/exec/lib/"
        copy {
            from fileTree("build/dependencies/")
            into file("build/exec/lib/")
        }
    }
}

artifacts {
//    packedJar
}

dependencies {
    runtimeOnly project(":core")
    runtimeOnly project(":desktop")
    runtimeOnly project(":desktop-merge")
    runtimeOnly project(":gameprovider")
    runtimeOnly project(":minimal")
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println("OS: " + System.getProperty("os.name") + " Version: " + System.getProperty("os.version"))

println("Current version: " + version)
println("Project: " + group + ":" + name)

mkdir("$buildDir/bubbles")

def ps = System.getProperty("path.separator")
def files = configurations.runtimeClasspath
def strm = (files.toList()).stream()
def rcl = String.join(ps, strm.map {
    it.path
}.filter{it != null }.toList())
//\tfabric.remapClasspathFile=$buildDir/bubbles/classpath.txt
//\tfabric.classPathGroups=$buildDir/classes/java/main/$ps$buildDir/resources/main/$ps${project(":core").buildDir}/classes/java/main/$ps${project(":core").buildDir}/resources/main/$ps${project(":desktop").buildDir}/classes/java/main/$ps${project(":desktop").buildDir}/resources/main/$ps${project(":gameprovider").buildDir}/classes/java/main/$ps${project(":gameprovider").buildDir}/resources/main/$ps$rcl
def conf = """
commonProperties
\tfabric.development=true
\tlog4j2.formatMsgNoLookups=true
\tfabric.log.disableAnsi=false
\tlog4j.configurationFile=$projectDir/log4j.xml
"""

def launchFile = file("$buildDir/bubbles/launch.cfg")
Files.writeString(launchFile.toPath(), conf, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE)

def cp = "$rcl"

def cpFile = file("$buildDir.absolutePath/bubbles/classpath.txt")
Files.writeString(cpFile.toPath(), cp, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE)

idea{
    project{
        settings {
            withIDEADir { File dir ->
                println("Callback 1 executed with: " + dir.absolutePath)
            }

            runConfigurations {
                "Bubble Blaster"(Application) {                       // Create new run configuration "MyApp" that will run class foo.App
                    jvmArgs = "-Xmx2g -Dfabric.dli.config=$launchFile.path -Dfabric.dli.env=CLIENT -Dfabric.dli.main=net.fabricmc.loader.impl.launch.knot.KnotClient"
                    mainClass = 'net.fabricmc.devlaunchinjector.Main'
                    moduleName = idea.module.name + ".desktop.main"
                    workingDirectory = "$projectDir/run/"
                    programParameters = "--gameDir=."
                }
            }
        }
    }
}
