//file:noinspection GroovyUnusedCatchParameter
import org.jetbrains.gradle.ext.Application

import java.nio.file.Files
import java.nio.file.Paths
import com.ultreon.bubbles.gradle.VersionType

import java.nio.file.StandardOpenOption

import static java.lang.System.getenv

buildscript {
    repositories {
        mavenCentral()

        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            name = "sonatype"
        }

        maven {
            url = "https://maven.atlassian.com/3rdparty/"
        }

        google()
    }

    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.8.0'
        classpath "com.google.code.gson:gson:2.8.9"
    }
}

//*****************//
//     Plugins     //
//*****************//
plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id "org.panteleyev.jpackageplugin" version "1.5.0"
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'bubbles-gradle'

//****************************//
// Setting up main properties //
//****************************//

version project_version
group project_group

archivesBaseName = archives_base_name

java {
    withSourcesJar()
    withJavadocJar()
}

bubbles {
    versionType(VersionType.DEV)
}

//**********************//
//     Repositories     //
//**********************//
repositories {
    mavenCentral()
    mavenLocal()
    google()
    jcenter()
    maven {
        name "Atlassian"
        url "https://maven.atlassian.com/3rdparty/"
    }
    maven {
        name "ImageJ"
        url "https://maven.imagej.net/content/repositories/public/"
    }
    maven {
        name "Maven Central"
        url "https://repo1.maven.org/maven2/"
    }
    maven {
        name "RuneLite"
        url "https://repo.runelite.net/"
    }
    maven {
        name "JitPack"
        url 'https://jitpack.io'
    }
    flatDir {
        name "Project Libraries"
        dirs "${projectDir}/libs"
    }
}

/*****************
 * Configurations
 */
configurations {
    // configuration that holds jars to include in the jar
    implementation {
        canBeResolved true
    }
    include {
        canBeResolved true
    }
}

/***************
 * Dependencies
 */
dependencies {
    // Projects
    include(runtimeOnly project(":preloader"))
    include(runtimeOnly project(":game"))
}

allprojects {
    apply plugin: "bubbles-gradle"
    apply plugin: "maven-publish"
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "idea"
    apply plugin: "groovy"

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
        repositories {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/Ultreon/bubble-blaster-2"
                credentials {
                    username = getenv("GITHUB_ACTOR")
                    password = getenv("GITHUB_TOKEN")
                }
            }
        }
    }

    repositories {
        maven {
            url = "https://maven.fabricmc.net"
            name = "FabricMC"
        }

        maven {
            name "Jabylon"
            url "https://jabylon.org/maven/"
        }
    }

    dependencies {
        implementation("net.fabricmc:fabric-loader:0.14.19")

        // fabric-loader dependencies
        implementation "org.ow2.asm:asm:${project.asm_version}"
        implementation "org.ow2.asm:asm-analysis:${project.asm_version}"
        implementation "org.ow2.asm:asm-commons:${project.asm_version}"
        implementation "org.ow2.asm:asm-tree:${project.asm_version}"
        implementation "org.ow2.asm:asm-util:${project.asm_version}"

        implementation("net.fabricmc:sponge-mixin:${project.mixin_version}") {
            exclude module: 'launchwrapper'
            exclude module: 'guava'
        }
        implementation 'net.fabricmc:tiny-mappings-parser:0.3.0+build.17'
        implementation 'net.fabricmc:tiny-remapper:0.8.2'
        implementation 'net.fabricmc:dev-launch-injector:0.2.1+build.8'
        implementation 'net.fabricmc:access-widener:2.1.0'

        implementation 'org.ow2.sat4j:org.ow2.sat4j.core:2.3.6'
        implementation 'org.ow2.sat4j:org.ow2.sat4j.pb:2.3.6'
        implementation 'org.ow2.sat4j:org.ow2.sat4j.pb:2.3.6'
//        implementation("xerces:xercesImpl:2.12.2")
    }

    publish.dependsOn build
    publish.finalizedBy(it.retrieveUrls)
}

// task to add addons.json to all relevant folders
task replaceResources(type: Copy) {
    from("src/main/resources/META-INF/addons.json")
    outputs.upToDateWhen {
        false
    }

    filter { line -> line.replaceAll('\\\$\\\$ADDON_VERSION\\\$\\\$', project_version.project_version()) }
    into new File(processResources.destinationDir, "META-INF")
}

processResources {
    exclude 'META-INF/addons.json'
    finalizedBy replaceResources
}

jar {
    dependsOn ":preloader:jar"

    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'Bubble Blaster 2',
                'Implementation-Vendor': 'Ultreon Team',
                project_version: project.project_version,
                'Main-Class': 'com.ultreon.preloader.PreGameLoader',
                'Multi-Release': 'true'
    }

    from {
        compileJava.outputs
    }
    from {
        processResources.outputs
    }

    zip64 true
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

processResources {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

test {
    useJUnitPlatform()
}

tasks.create('prepareRun', {
    Files.createDirectories(Paths.get(projectDir.getAbsolutePath(), "run"))
})

tasks.withType(JavaCompile).configureEach {
    options.fork = true
    options.incremental = true
}

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

task packedJar(type: Jar) {
    doFirst {
        def collect = configurations.include.files.collect { it.name }
        Files.write(file("$buildDir/jar-files.txt").toPath(), String.join("\n", collect).getBytes("UTF-8"), StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE, StandardOpenOption.WRITE)
    }

    dependsOn ":preloader:jar"
    dependsOn ":jar"

    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'QBubbles',
                'Implementation-Vendor': 'Ultreon Team',
                project_version: "1.0-indev1",
                'Main-Class': 'com.ultreon.premain.PreMain',
                'Multi-Release': 'true'
    }

    into('META-INF/jars') {
        from configurations.include
    }

    into('META-INF') {
        from file("$buildDir/jar-files.txt")
    }

    archivesBaseName = "bubbles"

    from zipTree(jar.archiveFile.get())
    classifier "packed"
    zip64 true
    duplicatesStrategy DuplicatesStrategy.INCLUDE

    doLast {
        copy {
            from archiveFile
            into buildDir
            rename ".*", "packed.jar"
        }
    }
}

build {
    mustRunAfter ":packedJar"
}

task createExec {
    doFirst {
        if (!file("build").exists()) {
            mkdir "build"
        }
        mkdir "build/exec/"
        if (file("build/exec/lib/").exists()) {
            delete fileTree("build/exec/lib/")
        }
        copy {
            from file("bin/start.bat")
            into file("build/exec/")
        }
        copy {
            from file("bin/start-unix.sh")
            into file("build/exec/")
        }
        copy {
            from file("bin/start-mac.sh")
            into file("build/exec/")
        }
        copy {
            from jar.outputs.files.singleFile
            into file("build/exec/")
            rename ".*", "bubbles.jar"
        }
        mkdir "build/exec/lib/"
        copy {
            from fileTree("build/dependencies/")
            into file("build/exec/lib/")
        }
    }
}

artifacts {
    packedJar
}

jar.finalizedBy(retrieveUrls)
publish.finalizedBy(retrieveUrls)

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

task("copyDependencies", type: Copy) {
    from(configurations.runtimeClasspath)
    into("$buildDir/jars")
}

task("copyJar", type: Copy) {
    from(tasks.jar)
    into("$buildDir/jars")
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println("OS: " + System.getProperty("os.name") + " Version: " + System.getProperty("os.version"))

println("Current version: " + project_version)
println("Project: " + group + ":" + archivesBaseName)
println("Bulding a Java " + compileJava.targetCompatibility + " project...")

mkdir("$buildDir/bubbles")
def ps = System.getProperty("path.separator")
def files = configurations.runtimeClasspath
def strm = (files.toList()).stream()
def rcl = String.join(ps, strm.map {
    it.path
}.filter{it != null }.toList())
//\tfabric.remapClasspathFile=$buildDir/bubbles/classpath.txt
//\tfabric.classPathGroups=$buildDir/classes/java/main/$ps$buildDir/resources/main/$ps${project(":game").buildDir}/classes/java/main/$ps${project(":game").buildDir}/resources/main/$ps${project(":preloader").buildDir}/classes/java/main/$ps${project(":preloader").buildDir}/resources/main/$ps$rcl
def conf = """
commonProperties
\tfabric.development=true
\tlog4j2.formatMsgNoLookups=true
\tfabric.log.disableAnsi=false
\tlog4j.configurationFile=$projectDir/log4j.xml
"""

def launchFile = file("$buildDir/bubbles/launch.cfg")
Files.writeString(launchFile.toPath(), conf, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE)

def cp = "$rcl"

def cpFile = file("$buildDir.absolutePath/bubbles/classpath.txt")
Files.writeString(cpFile.toPath(), cp, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE)

idea{
    project{
        settings {
            withIDEADir { File dir ->
                println("Callback 1 executed with: " + dir.absolutePath)
            }

            runConfigurations {
                "Bubble Blaster"(Application) {                       // Create new run configuration "MyApp" that will run class foo.App
                    jvmArgs = "-Xmx2g -Dfabric.dli.config=$launchFile.path -Dfabric.dli.env=CLIENT -Dfabric.dli.main=net.fabricmc.loader.impl.launch.knot.KnotClient"
                    mainClass = 'net.fabricmc.devlaunchinjector.Main'
                    moduleName = idea.module.name + ".game.main"
                    workingDirectory = "$projectDir/run/"
                }
            }
        }
    }
}
