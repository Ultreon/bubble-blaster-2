//file:noinspection GroovyUnusedCatchParameter


//import com.ultreon.gameutils.GameUtilsPlugin
//import com.ultreon.gameutils.ProjectType
import org.panteleyev.jpackage.ImageType

import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        mavenCentral()

        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            name = "sonatype"
        }

        maven {
            url = "https://maven.atlassian.com/3rdparty/"
        }

        google()
    }

    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.11.0'
        classpath "com.google.code.gson:gson:2.10.1"
    }
}

//*****************//
//     Plugins     //
//*****************//
plugins {
    id 'java'
    id 'java-library'
    id "org.panteleyev.jpackageplugin" version "1.5.0"
}

apply plugin: 'java'
apply plugin: 'java-library'

//****************************//
// Setting up main properties //
//****************************//

//projectConfig {
//    type ProjectType.Common
//    jarDependTasks({[copyDependencies, copyJar]})
//}

archivesBaseName = archives_base_name + "-gameprovider"

def packageVersion = "1.0.0"

java {
    withSourcesJar()
    withJavadocJar()
}

repositories {
    maven {
        url = "https://maven.fabricmc.net"
        name = "FabricMC"
    }
}

configurations {
    addToJar {
        canBeResolved true
    }
}

evaluationDependsOn(":core")

dependencies {
    addToJar implementation(project(":gameprovider"))
    pack implementation(project(":core"))
    pack implementation(project(":desktop"))

    pack implementation("com.formdev:flatlaf:3.2.1")

    pack implementation("com.badlogicgames.gdx:gdx:$gdx_version")
    pack implementation("com.badlogicgames.gdx:gdx-box2d:$gdx_version")
    pack implementation("com.badlogicgames.ashley:ashley:$ashley_version")
    pack implementation("com.badlogicgames.gdx:gdx-ai:$ai_version")
    pack implementation("com.badlogicgames.gdx-controllers:gdx-controllers-core:$gdx_controllers_version")
    pack implementation("com.badlogicgames.gdx:gdx-freetype:$gdx_version")
    pack implementation("com.badlogicgames.box2dlights:box2dlights:$box_2d_lights_version")

    pack implementation("com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdx_version")
    pack implementation("com.badlogicgames.gdx:gdx-platform:$gdx_version:natives-desktop")
    pack implementation("com.badlogicgames.gdx:gdx-box2d-platform:$gdx_version:natives-desktop")
    pack implementation("com.badlogicgames.gdx:gdx-bullet-platform:$gdx_version:natives-desktop")
    pack implementation("com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdx_controllers_version")
    pack implementation("com.badlogicgames.gdx:gdx-freetype-platform:$gdx_version:natives-desktop")

    // Apache Log4J
    pack implementation("org.apache.logging.log4j:log4j:$log4j_version")
    pack implementation("org.apache.logging.log4j:log4j-core:$log4j_version")
    pack implementation("org.apache.logging.log4j:log4j-api:$log4j_version")
    pack implementation("org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version")

    // JNA
    pack implementation("net.java.dev.jna:jna:$jna_version")
    pack implementation("net.java.dev.jna:jna-platform:$jna_version")

    // SLF4J
    pack api("org.slf4j:slf4j-api:$slf4j_version")

    // Google
    pack implementation("com.google.code.gson:gson:2.10.1")
    pack implementation('com.google.guava:guava:32.0.0-jre')

    // Misc
    pack implementation('it.unimi.dsi:fastutil:8.5.12')
    pack implementation('com.raylabz:opensimplex:1.0.3')

    pack implementation("space.earlygrey:shapedrawer:$shapedrawer_version")

    // ImGui
    pack implementation("io.github.spair:imgui-java-binding:$imgui_version")
    pack implementation("io.github.spair:imgui-java-lwjgl3:$imgui_version")
    pack implementation("io.github.spair:imgui-java-natives-linux:$imgui_version")
    pack implementation("io.github.spair:imgui-java-natives-macos:$imgui_version")
    pack implementation("io.github.spair:imgui-java-natives-windows:$imgui_version")

    pack implementation("it.unimi.dsi:fastutil-core:8.5.9")
    pack implementation("com.google.code.findbugs:jsr305:$jsr_version")
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"

    pack implementation("org.xbib.elasticsearch:joptsimple:6.3.2.1")
    pack implementation("org.apache.logging.log4j:log4j:$log4j_version")
    pack implementation("org.apache.logging.log4j:log4j-core:$log4j_version")
    pack implementation("org.apache.logging.log4j:log4j-api:$log4j_version")

    // quilt-loader dependencies
    pack implementation("org.ow2.asm:asm:${project.asm_version}")
    pack implementation("org.ow2.asm:asm-analysis:${project.asm_version}")
    pack implementation("org.ow2.asm:asm-commons:${project.asm_version}")
    pack implementation("org.ow2.asm:asm-tree:${project.asm_version}")
    pack implementation("org.ow2.asm:asm-util:${project.asm_version}")

    pack implementation("net.fabricmc:sponge-mixin:${project.mixin_version}") {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
    }

    //noinspection GradleDynamicVersion
    pack implementation('net.fabricmc:tiny-mappings-parser:0.3.0+build.17')
    pack implementation('net.fabricmc:tiny-remapper:0.8.7')
    //noinspection GradleDynamicVersion
    pack implementation('net.fabricmc:dev-launch-injector:0.2.1+build.8')
    pack implementation('net.fabricmc:access-widener:2.1.0')

    pack compileOnly("org.quiltmc:quilt-loader:$quilt_version")
}

processResources {
    from(file("$rootProject.projectDir/LICENSE")) { into "META-INF/" }
    exclude "*.pdn", "*.xcf", "*.ps"

    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

jar {
    dependsOn ":gameprovider:build"
    dependsOn ":desktop:build"
    dependsOn ":core:build"
    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'Bubble Blaster',
                'Implementation-Vendor': 'Ultreon Team',
                project_version: project.project_version,
                'Main-Class': 'com.ultreon.bubbles.DesktopLauncher',
                'Multi-Release': 'true'
    }

    from(configurations.addToJar.collect {
        zipTree(it).matching {
            exclude "*.RSA", "*.SF", "*.MF"
        }
    })
    from {
        compileJava.outputs
    }
    from {
        processResources.outputs
    }

    exclude "*.RSA", "*.SF", "*.MF"

    zip64 true
    duplicatesStrategy DuplicatesStrategy.INCLUDE

    doLast {
        println "DESK_MERGE FILE: ${file("$projectDir/build/libs/").list().toArrayString()}"
        println "CORE FILE: ${file("${project(":core")buildDir}/libs/").list().toArrayString()}"
        println "DESKTOP FILE: ${file("${project(":desktop")buildDir}/libs/").list().toArrayString()}"
        println "GAMEPROVIDER FILE: ${file("${project(":gameprovider")buildDir}/libs/").list().toArrayString()}"
    }
}

tasks.create('prepareRun', {
    Files.createDirectories(Paths.get(rootProject.projectDir.getAbsolutePath(), "run"))
})

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

delete "$projectDir/build/jars"

tasks.register('copyDependencies', Copy) {
    from(configurations.runtimeClasspath)
    exclude "lwjgl-2.9.3.jar"
    exclude "lwjgl-platform-2.9.3.jar"
    exclude "lwjgl-platform-2.9.3-*.jar"
    into("$projectDir/build/jars")
}

tasks.register('copyJar', Copy) {
    from(tasks.jar)
    into("$projectDir/build/jars")
}

tasks.register('package', Zip) {
    dependsOn("build", ":gameprovider:build", ":desktop:build", ":core:build", "copyDependencies", "copyJar")

    from fileTree(dir: "$projectDir/build/jars", include: "*.jar")
    archiveFileName = 'package.zip'
    destinationDirectory = file("$rootProject/build/dist/")
}

jpackage {
    dependsOn("build", ":gameprovider:build", ":desktop:build", ":core:build", "copyDependencies", "copyJar")

    input  = "$projectDir/build/jars"
    destination = "$projectDir/build/bin"

    appName = app_name
    appVersion = project.version.toString()
    vendor = "Ultreon Team"
    copyright = "Copyright (c) 2023 Ultreon Team"
    runtimeImage = System.getProperty("java.home")

    mainJar = jar.archiveFileName.get()
    mainClass = "com.ultreon.bubbles.premain.PreMain"

    destination = "$projectDir/build/dist"

    licenseFile = "$rootProject.projectDir/package/LICENSE.txt"

    javaOptions = [ "-Dfile.encoding=UTF-8", "-Dbubbleblaster.environment=packaged","-Dloader.skipMcProvider=true" ]
    arguments = [ "--packaged" ]

    aboutUrl = "https://github.com/Ultreon/bubble-blaster-2"

    mac {
        javaOptions = javaOptions + [ "-XstartOnFirstThread" ]
        icon = "$rootProject.projectDir/icons/icon.icns"
        macPackageIdentifier = project_id
        macPackageName = project_name
        appVersion = packageVersion
    }

    linux {
        icon = "$rootProject.projectDir/icons/icon.png"
        appVersion = project.version.toString()
        aboutUrl = null
        licenseFile = null
        type = ImageType.APP_IMAGE
        destination = "$rootProject.projectDir/build/tmp"

        tasks.register("createAppImage", Zip) {
            def app_name = app_name
            from fileTree("$rootProject.projectDir/build/tmp/$app_name")
            archiveFileName = "${app_name}.zip"
            destinationDirectory = file("$projectDir/build/dist/")
            doLast {
                delete files("$rootProject.projectDir/build/tmp/$app_name/**/*", "$rootProject.projectDir/build/tmp/$app_name")
            }
        }

        finalizedBy createAppImage

        if (file("$rootProject.projectDir/build/tmp/$app_name").exists()) {
            delete files("$rootProject.projectDir/build/tmp/$app_name/**/*", "$rootProject.projectDir/build/tmp/$app_name")
        }
    }

    windows {
        icon = "$rootProject.projectDir/icons/icon.ico"
        winMenu = true
        winDirChooser = true
        winConsole = false
        winPerUserInstall = true
        winShortcutPrompt = true
        winShortcut = false
        winUpgradeUuid = "a539b496-ae50-4df2-9a1b-8a089e44f7ce"
        winMenuGroup = "Ultreon Team"
        appVersion = (project.version).toString().replaceAll("-cb\\.\\d+", "").replace("+", ".")
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}
