//file:noinspection GroovyUnusedCatchParameter

import java.nio.file.Files
import java.nio.file.Paths
import com.ultreon.bubbles.gradle.VersionType

import java.nio.file.StandardOpenOption

import static java.lang.System.getenv

buildscript {
    repositories {
        mavenCentral()

        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            name = "sonatype"
        }

        maven {
            url = "https://maven.atlassian.com/3rdparty/"
        }

        google()
    }

    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.8.0'
        classpath "com.google.code.gson:gson:2.8.9"
    }
}

//*****************//
//     Plugins     //
//*****************//
plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id "org.panteleyev.jpackageplugin"
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'bubbles-gradle'

//****************************//
// Setting up main properties //
//****************************//

// Project properties.
def projectId = property("project_id")
def projectName = property("project_name")
def projectVersion = property("project_version")
def appName1 = property("app_name")

version "${project_version}+${getenv("GITHUB_BUILD_NUMBER") == null ? "local" : getenv("GITHUB_BUILD_NUMBER")}"
group 'com.ultreon.bubbles' // http://maven.apache.org/guides/mini/guide-naming-conventions.html

def packageVersion = ((String) version).replaceAll("\\+local", ".0").replaceAll("\\+", ".")

java {
    withSourcesJar()
    withJavadocJar()
}

task deleteOldJavadoc(type: Delete) {
    delete fileTree("$projectDir/docs/latest/")
}

task copyJavadoc(type: Copy) {
    from javadoc.outputs
    into "$projectDir/docs/latest/"
    dependsOn deleteOldJavadoc
}

mkdir "$projectDir/docs/"
mkdir "$projectDir/docs/latest"

javadoc.finalizedBy(copyJavadoc)

bubbles {
    versionType(VersionType.DEV)
}

//**********************//
//     Repositories     //
//**********************//
repositories {
    mavenCentral()
    mavenLocal()
    google()
    jcenter()
    maven {
        name "Atlassian"
        url "https://maven.atlassian.com/3rdparty/"
    }
    maven {
        name "ImageJ"
        url "https://maven.imagej.net/content/repositories/public/"
    }
    maven {
        name "Maven Central"
        url "https://repo1.maven.org/maven2/"
    }
    maven {
        name "RuneLite"
        url "https://repo.runelite.net/"
    }
    maven {
        name "JitPack"
        url 'https://jitpack.io'
    }
    flatDir {
        name "Project Libraries"
        dirs "${projectDir}/libs"
    }
}

/***************
 * Dependencies
 */
dependencies {
    // Projects
    implementation project(":preloader")
    implementation "it.unimi.dsi:fastutil:8.5.9"
    implementation "it.unimi.dsi:fastutil-extra:8.5.4"
    implementation "it.unimi.dsi:fastutil-core:8.5.9"
    implementation "org.checkerframework:checker:3.25.0"

    // Test dependencies
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.9.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.9.0"

    // Misc
    implementation "org.jetbrains:annotations:23.0.0"

    // Apis
    implementation "commons-io:commons-io:2.11.0"
    implementation "org.apache.commons:commons-lang3:3.12.0"
    implementation "org.apache.commons:commons-collections4:4.4"
    implementation "org.apache.commons:commons-text:1.10.0"
    implementation "org.apache.commons:commons-math3:3.6.1"
    implementation "org.apache.ant:ant:1.10.12"

    // Local jars.
    implementation fileTree(dir: "$projectDir/libs", include: ["*.jar"])

    // Google
    implementation "com.google.code.findbugs:jsr305:$jsr_version"
    implementation "com.google.guava:guava:$guava_version"
    implementation "com.google.code.gson:gson:$gson_version"

    // Apache
    implementation "org.apache.logging.log4j:log4j:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-core:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-api:$log4j_version"
    implementation("org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version") { exclude group: "org.slf4j" }
    implementation "org.apache.logging.log4j:log4j-jcl:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-jul:$log4j_version"
    implementation "org.apache.logging.log4j:log4j-web:$log4j_version"
    implementation "org.apache.xmlgraphics:batik-svg-dom:$batik_version"
    implementation "org.apache.xmlgraphics:batik-dom:$batik_version"
    implementation "org.apache.xmlgraphics:batik-all:$batik_version"
    implementation "org.apache.xmlgraphics:batik-util:$batik_version"
    implementation "org.apache.xmlgraphics:batik-swing:$batik_version"
    implementation "org.apache.xmlgraphics:batik-awt-util:$batik_version"

    // SLF4J
    implementation "org.slf4j:slf4j-api:[1.7, 1.8)!!"

    // JHLabs
    implementation "com.jhlabs:filters:2.0.235-1"

    // SwingLabs
    implementation "org.swinglabs.swingx:swingx-all:1.6.5-1"

    // FuseSource
    implementation "org.fusesource.jansi:jansi:2.4.0"

    // OpenJFX
    implementation "org.openjfx:javafx-swing:$openjfx_version"
    implementation "org.openjfx:javafx-media:$openjfx_version"
    implementation "org.openjfx:javafx-controls:$openjfx_version"
    implementation "org.openjfx:javafx-graphics:$openjfx_version"
    implementation "org.openjfx:javafx:$openjfx_version"

    // OpenJFX Natives
    implementation "org.openjfx:javafx-swing:$openjfx_version:win"
    implementation "org.openjfx:javafx-swing:$openjfx_version:mac"
    implementation "org.openjfx:javafx-swing:$openjfx_version:linux"
    implementation "org.openjfx:javafx-media:$openjfx_version:win"
    implementation "org.openjfx:javafx-media:$openjfx_version:mac"
    implementation "org.openjfx:javafx-media:$openjfx_version:linux"
    implementation "org.openjfx:javafx-controls:$openjfx_version:win"
    implementation "org.openjfx:javafx-controls:$openjfx_version:mac"
    implementation "org.openjfx:javafx-controls:$openjfx_version:linux"
    implementation "org.openjfx:javafx-graphics:$openjfx_version:win"
    implementation "org.openjfx:javafx-graphics:$openjfx_version:mac"
    implementation "org.openjfx:javafx-graphics:$openjfx_version:linux"
    implementation "org.openjfx:javafx-base:$openjfx_version:win"
    implementation "org.openjfx:javafx-base:$openjfx_version:mac"
    implementation "org.openjfx:javafx-base:$openjfx_version:linux"

    // OSHi (For system info in crash reports)
    implementation "com.github.oshi:oshi-core:$oshi_version"

    // Discord Presence
    implementation "com.github.JnCrMx:discord-game-sdk4j:v0.5.5"

    // MP3 Sounds
    implementation "javazoom:jlayer:1.0.1"
    implementation "javax.media:jmf:2.1.1e"
}

// task to add addons.json to all relevant folders
task replaceResources(type: Copy) {
    from("src/main/resources/META-INF/addons.json")
    outputs.upToDateWhen {
        false
    }

    filter { line -> line.replaceAll('\\\$\\\$ADDON_VERSION\\\$\\\$', version.toString()) }
    into new File(processResources.destinationDir, "META-INF")
}

processResources {
    exclude 'META-INF/addons.json'
    finalizedBy replaceResources
}

jar {
    dependsOn ":preloader:jar"

    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'Bubble Blaster 2',
                'Implementation-Vendor': 'Ultreon Team',
                'Implementation-Version': project.version,
                'Main-Class': 'com.ultreon.preloader.PreGameLoader',
                'Multi-Release': 'true'
    }

    from {
        compileJava.outputs
    }
    from {
        processResources.outputs
    }

    zip64 true
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

processResources {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

test {
    useJUnitPlatform()
}

tasks.create('prepareRun', {
    Files.createDirectories(Paths.get(projectDir.getAbsolutePath(), "run"))
})

tasks.withType(JavaCompile).configureEach {
    options.fork = true
    options.incremental = true
}

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

build {
    mustRunAfter ":packedJar"
}

task createExec {
    doFirst {
        if (!file("build").exists()) {
            mkdir "build"
        }
        mkdir "build/exec/"
        if (file("build/exec/lib/").exists()) {
            delete fileTree("build/exec/lib/")
        }
        copy {
            from file("bin/start.bat")
            into file("build/exec/")
        }
        copy {
            from file("bin/start-unix.sh")
            into file("build/exec/")
        }
        copy {
            from file("bin/start-mac.sh")
            into file("build/exec/")
        }
        copy {
            from jar.outputs.files.singleFile
            into file("build/exec/")
            rename ".*", "bubbles.jar"
        }
        mkdir "build/exec/lib/"
        copy {
            from fileTree("build/dependencies/")
            into file("build/exec/lib/")
        }
    }
}

jar.finalizedBy(retrieveUrls)
publish.finalizedBy(retrieveUrls)

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

task("copyDependencies", type: Copy) {
    from(configurations.runtimeClasspath)
    into("$buildDir/jars")
}

task("copyJar", type: Copy) {
    from(tasks.jar)
    into("$buildDir/jars")
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println("OS: " + System.getProperty("os.name") + " Version: " + System.getProperty("os.version"))

println("Current version: " + version)
println("Project: " + group + ":" + archivesBaseName)
println("Bulding a Java " + compileJava.targetCompatibility + " project...")
